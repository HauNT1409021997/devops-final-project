# Default values for data-platform-hth.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

airflow:
  ports:
    flowerUI: 5555
    airflowUI: 8080
    workerLogs: 8793
    triggererLogs: 8794
    redisDB: 6379
    statsdIngest: 9125
    statsdScrape: 9102
    pgbouncer: 6543
    pgbouncerScrape: 9127

  config:
    webserver:
      expose_config: 'True'
    api:
      auth_backends: 'airflow.api.auth.backend.basic_auth'
  dags:
    persistence:
      enabled: true
    gitSync:
      enabled: true
      repo: https://github.com/HauNT1409021997/ariflow-dags-job
      branch: main
      rev: HEAD
      ref: main
      depth: 1
      maxFailures: 2
      subPath: "/"

  webserver:
    service:
      type: NodePort
      annotations: {}
      ports:
       - name: airflow-ui
         port: 8080
         targetPort: 8080
         nodePort: 31151
    networkPolicy:
      ingress:
        from: []
    serviceAccount:
      # default value is true
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
      automountServiceAccountToken: true
      # Specifies whether a ServiceAccount should be created
      create: true
      # The name of the ServiceAccount to use.
      # If not set and create is true, a name is generated using the release name
      name: ~

      # Annotations to add to webserver kubernetes service account.
      annotations:
        iam.gke.io/gcp-service-account: gke-admin@gke-nth.iam.gserviceaccount.com

    extraInitContainers:
      - name: install-google-providers
        image: apache/airflow:2.9.3  # Match your Airflow image version
        command:
          - /bin/bash
          - -c
        args:
          - |
            pip install apache-airflow-providers-google
            echo "Google provider package installed"
        volumeMounts:
          - name: airflow-python-packages
            mountPath: /opt/airflow/.local/lib/python3.8/site-packages

      # Mount additional volumes into worker. It can be templated like in the following example:
      #   extraVolumes:
      #     - name: my-templated-extra-volume
      #       secret:
      #          secretName: '{{ include "my_secret_template" . }}'
      #          defaultMode: 0640
      #          optional: true
      #
      #   extraVolumeMounts:
      #     - name: my-templated-extra-volume
      #       mountPath: "{{ .Values.my_custom_path }}"
      #       readOnly: true
    extraVolumes:
      - name: airflow-python-packages
        emptyDir: { }

    extraVolumeMounts:
      - name: airflow-python-packages
        mountPath: /opt/airflow/.local/lib/python3.8/site-packages
  scheduler:
    # Create ServiceAccount
    serviceAccount:
      # default value is true
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
      automountServiceAccountToken: true
      # Specifies whether a ServiceAccount should be created
      create: true
      # The name of the ServiceAccount to use.
      # If not set and create is true, a name is generated using the release name
      name: ~

      # Annotations to add to scheduler kubernetes service account.
  #      annotations:
  #        iam.gke.io/gcp-service-account: "gke-admin@gke-nth.iam.gserviceaccount.com"

  workers:
    # Create ServiceAccount
    serviceAccount:
      # default value is true
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
      automountServiceAccountToken: true
      # Specifies whether a ServiceAccount should be created
      create: true
      # The name of the ServiceAccount to use.
      # If not set and create is true, a name is generated using the release name
      name: ~

      # Annotations to add to worker kubernetes service account.
      annotations:
        iam.gke.io/gcp-service-account: "gke-admin@gke-nth.iam.gserviceaccount.com"

    extraInitContainers:
      - name: install-google-providers
        image: apache/airflow:2.9.3  # Match your Airflow image version
        command:
          - /bin/bash
          - -c
        args:
          - |
            pip install apache-airflow-providers-google
            echo "Google provider package installed"
        volumeMounts:
          - name: airflow-python-packages
            mountPath: /opt/airflow/.local/lib/python3.8/site-packages

      # Mount additional volumes into worker. It can be templated like in the following example:
      #   extraVolumes:
      #     - name: my-templated-extra-volume
      #       secret:
      #          secretName: '{{ include "my_secret_template" . }}'
      #          defaultMode: 0640
      #          optional: true
      #
      #   extraVolumeMounts:
      #     - name: my-templated-extra-volume
      #       mountPath: "{{ .Values.my_custom_path }}"
      #       readOnly: true
    extraVolumes:
      - name: airflow-python-packages
        emptyDir: { }

    extraVolumeMounts:
      - name: airflow-python-packages
        mountPath: /opt/airflow/.local/lib/python3.8/site-packages
